<?php
/**
 * @file      AblePolecat-Stub/var/www/htdocs/path.config
 * @brief    Able Polecat default project path configuration file.
 *
 * DO NOT MODIFY THIS FILE.
 * Changes effecting entire project should be made to AblePolecat-Stub\etc\polecat\conf\path.config
 * Changes effecting local environment should be made to AblePolecat-Stub\usr\etc\polecat\conf\path.config
 *
 * This file will terminate further execution of scripts and output a simple
 * error message on any condition, which violates Able Polecat configuration 
 * rules.
 *
 * @author    Karl Kuhrman
 * @copyright [BDS II License] (https://github.com/kkuhrman/AblePolecat/blob/master/LICENSE.md)
 */

global $ABLE_POLECAT_CONFIGURATION;
$ABLE_POLECAT_CONFIGURATION = array(
  'error' => array(),
  'warning' => array(),
  'status' => array(),
);
 
/**
 * Document root is the parent directory of this file (index.php).
 */
if (!defined('ABLE_POLECAT_DOCROOT')) {
  $ABLE_POLECAT_DOCROOT = __DIR__;
  define('ABLE_POLECAT_DOCROOT', $ABLE_POLECAT_DOCROOT);
}

/**
 * Root directory of the entire Able Polecat core project.
 */
if (!defined('ABLE_POLECAT_ROOT')) {
  $ABLE_POLECAT_ROOT = dirname(dirname(dirname(__DIR__)));
  define('ABLE_POLECAT_ROOT', $ABLE_POLECAT_ROOT);
}

/**
 * Master project configuration files directory.
 * Best practices require every Able Polecat project to include a set of master
 * project configuration files in this directory. Users should not modify these
 * files, rather copy them to ./usr/etc and make changes to the copies insetad.
 */
if (!defined('ABLE_POLECAT_ETC')) {
  $ABLE_POLECAT_ETC = ABLE_POLECAT_ROOT . DIRECTORY_SEPARATOR . 'etc';
  define('ABLE_POLECAT_ETC', $ABLE_POLECAT_ETC);
  $ABLE_POLECAT_MASTER_PROJECT_CONF_FILE_PATH = implode(
    DIRECTORY_SEPARATOR, 
    array(
      ABLE_POLECAT_ETC, 
      'polecat', 
      'conf', 
      'project.xml'
    )
  );
  if (!file_exists($ABLE_POLECAT_MASTER_PROJECT_CONF_FILE_PATH)) {
    $msg = sprintf("File is not accessible: %s.", $ABLE_POLECAT_MASTER_PROJECT_CONF_FILE_PATH);
    $ABLE_POLECAT_CONFIGURATION['error']['Master project configuration file'] = $msg;
  }
  if (is_writable($ABLE_POLECAT_MASTER_PROJECT_CONF_FILE_PATH)) {
    $msg = sprintf("Able Polecat project configuration violation. Master project configuration file is writeable. Unset write privileges on file (%s).",
      $ABLE_POLECAT_MASTER_PROJECT_CONF_FILE_PATH
    );
    $ABLE_POLECAT_CONFIGURATION['warning']['Master project configuration file'] = $msg;
  }
}

/**
 * Secondary directory hierarchy may contain the following sub-directories:
 * ./etc - project configuration files modified for local environment
 * ./mod - Able Polecat modules
 * ./lib - class libraries, which are not packaged as Able Polecat modules
 * ./share - documentation, examples, SQL, utility scripts etc.
 * ./src - project source files
 */
if (!defined('ABLE_POLECAT_USR')) {
  global $ABLE_POLECAT_USR;
  !isset($ABLE_POLECAT_USR) ? $ABLE_POLECAT_USR = ABLE_POLECAT_ROOT  . DIRECTORY_SEPARATOR . 'usr' : NULL;
  define('ABLE_POLECAT_USR', $ABLE_POLECAT_USR);
  $ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH_PARTS = array(
    ABLE_POLECAT_USR, 
    'etc', 
    'polecat', 
    'conf', 
    'project.xml'
  );
  $ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH = implode(DIRECTORY_SEPARATOR, $ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH_PARTS);
  if (!file_exists($ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH)) {
    //
    // Local project configuration file must either be manually copied to this location
    // or the parent directory must be writeable.
    //
    $msg = sprintf("File is not accessible: %s.", $ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH);
    $ABLE_POLECAT_CONFIGURATION['warning']['Local project configuration file'] = $msg;
    $pathHierarchyDepth = count($ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH_PARTS);
    for ($upLevels = 0; $upLevels < $pathHierarchyDepth; $upLevels++) {
      array_pop($ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH_PARTS);
      $checkPath = implode(DIRECTORY_SEPARATOR, $ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH_PARTS);
      if ($checkPath == '') {
        $msg = sprintf("Parent directory must be writeable or file must be manually copied: %s.", $ABLE_POLECAT_LOCAL_PROJECT_CONF_FILE_PATH);
        $ABLE_POLECAT_CONFIGURATION['error']['Local project configuration file'] = $msg;
      }
      else {
        if (is_writable($checkPath)) {
          break;
        }
      }
    }
  }
}

/**
 * Variable files directory hierarchy may contain the following sub-directories:
 * ./www/htdocs - web application document root (put Javascript, assets, etc. here).
 * ./log - Able Polecat default logs directory
 */
if (!defined('ABLE_POLECAT_VAR')) {
  global $ABLE_POLECAT_VAR;
  !isset($$ABLE_POLECAT_VAR) ? $ABLE_POLECAT_VAR = ABLE_POLECAT_ROOT . DIRECTORY_SEPARATOR . 'var' : NULL;
  define('ABLE_POLECAT_VAR', $ABLE_POLECAT_VAR);
  $ABLE_POLECAT_LOG_FILE_PATH_PARTS = array(
    ABLE_POLECAT_VAR, 
    'log'
  );
  $ABLE_POLECAT_LOG_FILE_PATH = implode(DIRECTORY_SEPARATOR, $ABLE_POLECAT_LOG_FILE_PATH_PARTS);
  if (!file_exists($ABLE_POLECAT_LOG_FILE_PATH)) {
    //
    // Log file directory must be writeable.
    // @todo: turn off log file generation.
    //
    $msg = sprintf("File is not accessible: %s.", $ABLE_POLECAT_LOG_FILE_PATH);
    $ABLE_POLECAT_CONFIGURATION['warning']['Log files'] = $msg;
    $pathHierarchyDepth = count($ABLE_POLECAT_LOG_FILE_PATH_PARTS);
    for ($upLevels = 0; $upLevels < $pathHierarchyDepth; $upLevels++) {
      array_pop($ABLE_POLECAT_LOG_FILE_PATH_PARTS);
      $checkPath = implode(DIRECTORY_SEPARATOR, $ABLE_POLECAT_LOG_FILE_PATH_PARTS);
      if ($checkPath == '') {
        $msg = sprintf("Log file directory must be writeable: %s.", $ABLE_POLECAT_LOG_FILE_PATH);
        $ABLE_POLECAT_CONFIGURATION['error']['Log files'] = $msg;
      }
      else {
        if (is_writable($checkPath)) {
          break;
        }
      }
    }
  }
}

/**
 * Project-specific path settings, including location of Able Polecat core 
 * class library, should be defined in ./etc/polecat/conf/path.config if they 
 * are platform independent. Changes for local environment should be made in a 
 * copy of this file at ./usr/etc/polecat/conf/path.config. Able Polecat will 
 * always go with the latter file, if it exists; otherwise, it will use the 
 * master (former).
 */
$localPathConf = implode(DIRECTORY_SEPARATOR, array(ABLE_POLECAT_USR, 'etc', 'polecat', 'conf', 'path.config'));
if (file_exists($localPathConf)) {
  include_once($localPathConf);
}
else {
  $masterPathConf = implode(DIRECTORY_SEPARATOR, array(ABLE_POLECAT_ETC, 'polecat', 'conf', 'path.config'));
  if (file_exists($masterPathConf)) {
    include_once($masterPathConf);
  }
  else {
    /**
     * This is the root directory containing all the interface implementations and 
     * extension class source files.
     */
    if (!defined('ABLE_POLECAT_SRC')) {
      global $ABLE_POLECAT_SRC;
      !isset($ABLE_POLECAT_SRC) ? $ABLE_POLECAT_SRC = ABLE_POLECAT_USR  . DIRECTORY_SEPARATOR . 'src' : NULL;
      define('ABLE_POLECAT_SRC', $ABLE_POLECAT_SRC);
    }
    
    /**
     * Location of Able Polecat core class library.
     * Override this definition if you intend to locate the core class library
     * anywhere other than ABLE_POLECAT_ROOT/core.
     *
     * Best practice is to clone Able Polecat (and other class libraries) in
     * ./project/usr/libs/
     */
    if (!defined('ABLE_POLECAT_CORE')) {
      global $ABLE_POLECAT_CORE;
      !isset($ABLE_POLECAT_CORE) ? $ABLE_POLECAT_CORE = implode(DIRECTORY_SEPARATOR, array(ABLE_POLECAT_USR, 'libs', 'AblePolecat', 'core')) : NULL;
      define('ABLE_POLECAT_CORE', $ABLE_POLECAT_CORE);
    }
  }
}

/**
 * Lastly, check location of Able Polecat core class library.
 */
if (!defined('ABLE_POLECAT_CORE')) {
  $msg = sprintf("Location of core class library is not defined.");
  $ABLE_POLECAT_CONFIGURATION['error']['Able Polecat core class library'] = $msg;
}
else {
  if (!file_exists(ABLE_POLECAT_CORE)) {
    $msg = sprintf("Core class library is not accessible: %s.", ABLE_POLECAT_CORE);
    $ABLE_POLECAT_CONFIGURATION['error']['Able Polecat core class library'] = $msg;
  }
}

if (count($ABLE_POLECAT_CONFIGURATION['error'])) {
  foreach($ABLE_POLECAT_CONFIGURATION['error'] as $criteria => $condition) {
    echo "<h1>Able Polecat project configuration error</h1>";
    echo "<h2>$criteria</h2>";
    echo "<p>$condition</p>";
    exit(1);
  }
}